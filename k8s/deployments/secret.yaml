# ============================================================================
#                         KUBERNETES RESOURCE: Secret
# ============================================================================
#
#  Purpose:
#  --------
#  A Secret is used to store a small amount of sensitive data such as a
#  password, a token, or a key. Storing this information in a Secret is more
#  secure than putting it directly into a Pod definition or a container image.
#
#  Tutorial Goal:
#  --------------
#  This example demonstrates the proper way to handle sensitive information in
#  Kubernetes. You will learn that while Secrets are not encrypted by default in
#  etcd, they provide a mechanism for securely injecting credentials into pods
#  and can be integrated with external secret management systems for enhanced
#  security.
#
#  Key Concepts:
#  -------------
#  - `data` vs. `stringData`:
#    - `data`: Values must be base64-encoded. This is the standard way Kubernetes
#      stores the data internally.
#    - `stringData`: You can provide plain-text values here, and Kubernetes will
#      automatically encode them for you before storing them in the `data` field.
#      This is more convenient for human-readable manifests.
#  - `type`: Specifies the type of secret, which helps other components
#    understand and validate the data (e.g., `kubernetes.io/dockerconfigjson`).
#
# ============================================================================

apiVersion: v1
kind: Secret
metadata:
  # The name of the Secret, used to reference it from Pods.
  name: app-secrets
  # The namespace where this Secret will be created.
  namespace: default
type: Opaque # The default type, used for arbitrary user-defined data.

# --- Using `stringData` for convenience ---
# Provide plain-text values here. Kubernetes will handle the base64 encoding.
# This is the recommended approach for writing manifests by hand.
stringData:
  # Example database password.
  DB_PASSWORD: "SuperSecretPassword123"

  # Example API key for an external service.
  API_KEY: "xyz-abc-123-789"

# --- Using `data` for pre-encoded values ---
# The `data` field will contain the base64-encoded versions of the `stringData`
# fields after you apply this manifest. You can also provide encoded data directly.
# For example, the base64-encoded value of "admin" is "YWRtaW4=".
#
# data:
#   DB_USER: "YWRtaW4=" # This is 'admin' encoded in base64
