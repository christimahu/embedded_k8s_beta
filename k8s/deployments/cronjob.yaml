# ============================================================================
#                         KUBERNETES RESOURCE: CronJob
# ============================================================================
#
#  Purpose:
#  --------
#  A CronJob creates Jobs on a repeating schedule. It is used for running
#  periodic tasks like backups, report generation, or automated maintenance.
#
#  Tutorial Goal:
#  --------------
#  This example teaches you how to automate recurring tasks within your cluster.
#  You will learn how to define a cron schedule and a Job template. The CronJob
#  controller will then automatically create a new Job based on that schedule,
#  which in turn creates a Pod to execute your task.
#
#  Key Concepts:
#  -------------
#  - `schedule`: The schedule in Cron format (e.g., `*/1 * * * *` for every minute).
#  - `jobTemplate`: A template for the Job that will be created on each schedule tick.
#  - `concurrencyPolicy`: What to do if a new job is triggered while a previous
#    one is still running (`Allow`, `Forbid`, `Replace`).
#  - `successfulJobsHistoryLimit`: How many completed jobs to keep for inspection.
#
# ============================================================================

apiVersion: batch/v1
kind: CronJob
metadata:
  # The name of the CronJob.
  name: my-cron-job
  namespace: default
spec:
  # --- Cron Schedule ---
  # The schedule in Cron format. This example runs every minute.
  # ┌───────────── minute (0 - 59)
  # │ ┌───────────── hour (0 - 23)
  # │ │ ┌───────────── day of the month (1 - 31)
  # │ │ │ ┌───────────── month (1 - 12)
  # │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)
  # │ │ │ │ │
  # │ │ │ │ │
  # * * * * *
  schedule: "*/1 * * * *"

  # --- Job Template ---
  # This is the blueprint for the Job that gets created by the CronJob.
  jobTemplate:
    spec:
      # The Pod template for the Pod that will run the job.
      template:
        spec:
          containers:
            # A list of containers to run.
            - name: my-task-container
              # The image to run. `busybox` is a small image with common utilities.
              image: busybox:1.36
              # The command to execute inside the container.
              # This example prints the current date and a message, then sleeps for 10 seconds.
              command: ["/bin/sh", "-c", "date; echo 'Hello from the Kubernetes CronJob'; sleep 10"]
          # --- Restart Policy ---
          # `OnFailure`: Restarts the container if it fails.
          # `Never`: Does not restart the container. It will be marked as failed.
          # For Jobs, `OnFailure` or `Never` are typically used. `Always` is not allowed.
          restartPolicy: OnFailure

  # --- Concurrency Policy ---
  # Specifies how to treat concurrent executions of a Job.
  # - `Allow` (default): Allows concurrent jobs to run.
  # - `Forbid`: Skips the new run if the previous one hasn't finished.
  # - `Replace`: Cancels the currently running job and replaces it with a new one.
  concurrencyPolicy: Forbid

  # The number of successful finished jobs to retain.
  successfulJobsHistoryLimit: 3
  # The number of failed finished jobs to retain.
  failedJobsHistoryLimit: 1
